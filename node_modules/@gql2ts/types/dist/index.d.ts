import { OperationTypeNode, SelectionNode, GraphQLType, NamedTypeNode, GraphQLNamedType, GraphQLOutputType, GraphQLInputType, TypeNode, OperationDefinitionNode, GraphQLEnumValue, FieldNode } from 'graphql';
import { PossibleSchemaInput, IFieldDocumentation } from '@gql2ts/util';
export declare type GetChildSelectionsType = (operation: OperationTypeNode, selection: SelectionNode, parent?: GraphQLType, isUndefined?: boolean) => IChildSelection;
export interface IProvidedOptions extends Partial<IFromQueryOptions> {
}
export declare type FromQuerySignature = (schema: PossibleSchemaInput, query: string, typeMap?: Partial<ITypeMap>, options?: IProvidedOptions) => IFromQueryReturnValue[];
export interface IComplexTypeSignature {
    iface: string;
    isPartial: boolean;
    name: string;
}
export interface IChildSelection {
    isFragment: boolean;
    isPartial: boolean;
    iface: string;
    complexTypes: IComplexTypeSignature[];
}
export interface IFromQueryReturnValue {
    variables: string;
    interface: string;
    additionalTypes: string[];
    result: string;
}
export declare type InterfaceFormatters = (operationName: string, fields: string[]) => string;
export declare type InterfaceNameWithExtensions = (operationName: string, extensions: string[]) => string;
export declare type GenerateSubTypeInterface = (selectionName: string, selection: FieldNode) => string | null;
export declare type WrapType = (type: string) => string;
export declare type TypePrinter = (type: string, isNonNull: boolean) => string;
export declare type InputFormatter = (name: string, isOptional: boolean, type: string) => string;
export declare type QueryNamer = (def: OperationDefinitionNode) => string;
export declare type EnumFormatter = (values: GraphQLEnumValue[], documentationGenerator: GenerateDocumentation) => string;
export declare type InterfaceAndTypeBuilder = (name: string, body: string) => string;
export declare type EnumTypeBuilder = (name: string, values: string) => string;
export declare type TypeJoiner = (types: string[]) => string;
export declare type InterfaceDeclarationGenerator = (fields: string[], indentation?: string) => string;
export declare type NamespaceGenerator = (namespaceName: string, interfaces: string) => string;
export declare type GenerateDocumentation = (documentation: IFieldDocumentation) => string;
export interface IFromQueryOptions {
    wrapList: WrapType;
    wrapPartial: WrapType;
    generateSubTypeInterfaceName: GenerateSubTypeInterface;
    printType: TypePrinter;
    formatInput: InputFormatter;
    generateFragmentName: WrapType;
    generateQueryName: QueryNamer;
    interfaceBuilder: InterfaceAndTypeBuilder;
    typeBuilder: InterfaceAndTypeBuilder;
    enumTypeBuilder: EnumTypeBuilder;
    generateEnumName: WrapType;
    formatEnum: EnumFormatter;
    typeJoiner: TypeJoiner;
    generateInterfaceDeclaration: InterfaceDeclarationGenerator;
    generateTypeName: WrapType;
    generateInterfaceName: WrapType;
    exportFunction: WrapType;
    addSemicolon: WrapType;
    generateNamespace: NamespaceGenerator;
    postProcessor: WrapType;
    generateInputName: WrapType;
    addExtensionsToInterfaceName: InterfaceNameWithExtensions;
    generateDocumentation: GenerateDocumentation;
    typeMap: ITypeMap;
}
export declare type HandleNamedTypes = (type: NamedTypeNode | GraphQLNamedType, isNonNull: boolean, replacement: string | null) => string;
export declare type HandleInputTypes = (type: TypeNode, isNonNull?: boolean, replacement?: string | null) => string;
export declare type ConvertToTypeSignature = (type: GraphQLOutputType | GraphQLInputType, isNonNull?: boolean, replacement?: string | null) => string;
export interface IDefaultTypeMap {
    ID: string;
    String: string;
    Boolean: string;
    Float: string;
    Int: string;
    __DEFAULT: string;
}
export interface ITypeMap extends IDefaultTypeMap {
    [x: string]: string | undefined;
}
